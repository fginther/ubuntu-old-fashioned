#!/bin/bash

set -eo pipefail

if [[ -n "${TRACE}" ]]; then
	set -xv
fi

__bartender_cmd_name="$(basename "${0}")"
__bartender_cmd_dir="$(dirname "$(readlink -f "${0}")")"

__flag_regex='\--[a-z-]\{1,\}'

print_usage() {
	cat << EOF >&2
usage: ${0} [<options>] -- --series <series> [<ubuntu-old-fashioned-options>]

	--livecd-rootfs-repo <url>

		The url to the git repo hosting livecd-rootfs.
		Value: ${LIVECD_ROOTFS_REPO}

	--livecd-rootfs-branch <branch>

		The branch of livecd-rootfs to use.
		Value: ${LIVECD_ROOTFS_BRANCH}

	--livecd-rootfs-dir <dir>

		A local directory containing livecd-rootfs.
		Value: ${LIVECD_ROOTFS_DIR:-None}

	--ubuntu-old-fashioned-repo <url>

		The url to the git repo hosting ubuntu-old-fashioned.
		Value: ${UBUNTU_OLD_FASHIONED_REPO}

	--ubuntu-old-fashioned-branch <branch>

		The branch of ubuntu-old-fashioned to use.
		Value: ${UBUNTU_OLD_FASHIONED_BRANCH}

	--ubuntu-old-fashioned-dir <dir>

		A local directory containing ubuntu-old-fashioned.
		Value: ${UBUNTU_OLD_FASHIONED_DIR:-None}

	--hook-extras-repo <url>

		The url to a git repo hosting extra hooks.
		Value: ${HOOK_EXTRAS_REPO:-None}

	--hook-extras-branch <branch>

		The branch of the extras-repo to use.
		Value: ${HOOK_EXTRAS_BRANCH:-None}

	--hook-extras-dir <dir>

		A local directory containing extra hooks.
		Value: ${HOOK_EXTRAS_DIR:-None}

	--chroot-archive <archive>

		A local archive used to perform the build.
		Value: ${CHROOT_ARCHIVE:-None}

	--build-provider <provider>

		The provider used to build the image.
		This can be either multipass or aws.
		Value: ${BUILD_PROVIDER}

	--no-cleanup

		Don't tear down the build provider after the build completes.
		Value: Cleanup? ${SHOULD_CLEANUP}

	--help

		Print this help message.

Options specified after '--' separator are used by Ubuntu Old Fashioned directly.

EOF
}

apply_default_bartender_configuration() {
	BUILD_PROVIDER=${BUILD_PROVIDER:-multipass}
	SHOULD_CLEANUP=${SHOULD_CLEANUP:-YES}
	LIVECD_ROOTFS_REPO=${LIVECD_ROOTFS_REPO:-https://git.launchpad.net/livecd-rootfs}
	UBUNTU_OLD_FASHIONED_REPO=${UBUNTU_OLD_FASHIONED_REPO:-https://github.com/chrisglass/ubuntu-old-fashioned.git}
	UBUNTU_OLD_FASHIONED_BRANCH=${UBUNTU_OLD_FASHIONED_BRANCH:-master}

	# Infer series configuration from script name
	local maybe_series
	maybe_series=$(echo "${__bartender_cmd_name}" | cut -d'-' -f2)
	if [[ "${maybe_series}" != "bartender" ]]; then
		LIVECD_ROOTFS_BRANCH=${LIVECD_ROOTFS_BRANCH:-ubuntu/${maybe_series}}
		series_flag=(--series ${maybe_series})
	else
		LIVECD_ROOTFS_BRANCH=${LIVECD_ROOTFS_BRANCH:-ubuntu/master}
	fi
}

assert_dependencies_installed() {
	local dependencies=(petname git)
	for dependency in "${dependencies[@]}"; do
		if ! command -v "${dependency}" &>/dev/null; then
			echo -e "\nerror: ${dependency} was not found in PATH\n" >&2
			exit 255
		fi
	done
}

load_build_provider_configuration() {
	local build_provider_config="${__bartender_cmd_dir}/${BUILD_PROVIDER}-provider"
	if [[ -f "${build_provider_config}" ]]; then
		# Ignore shellcheck warnings when trying to scan this file
		# shellcheck source=/dev/null
		source "${build_provider_config}"
	else
		echo -e "\nerror: invalid build provider specified: ${BUILD_PROVIDER}\n" >&2
		print_usage
		exit 255
	fi
}

prepare_livecd_rootfs() {
	local staging_dir="${1}"

	if [[ -n "${LIVECD_ROOTFS_DIR}" ]]; then
		cp -aR "${LIVECD_ROOTFS_DIR}" "${staging_dir}/livecd-rootfs"
	else
		git clone -qb "${LIVECD_ROOTFS_BRANCH}" "${LIVECD_ROOTFS_REPO}" "${staging_dir}/livecd-rootfs"
	fi
}

prepare_ubuntu_old_fashioned() {
	local staging_dir="${1}"

	if [[ -n "${UBUNTU_OLD_FASHIONED_DIR}" ]]; then
		cp -aR "${UBUNTU_OLD_FASHIONED_DIR}" "${staging_dir}/ubuntu-old-fashioned"
	else
		git clone -qb "${UBUNTU_OLD_FASHIONED_BRANCH}" "${UBUNTU_OLD_FASHIONED_REPO}" "${staging_dir}/ubuntu-old-fashioned"
	fi
}

prepare_extra_hooks() {
	local staging_dir="${1}"

	if [[ -n "${HOOK_EXTRAS_DIR}" ]]; then
		cp -aR "${HOOK_EXTRAS_DIR}" "${staging_dir}/extras"
	elif [[ -n "${HOOK_EXTRAS_REPO}" ]]; then
		if [[ -n "${HOOK_EXTRAS_BRANCH}" ]]; then
			local branch_flags=(-b "${HOOK_EXTRAS_BRANCH}")
		fi
		git clone -q "${branch_flags[@]}" "${HOOK_EXTRAS_REPO}" "${staging_dir}/extras"
	fi

	if [[ -d "${staging_dir}/extras" ]]; then
		find "${staging_dir}/livecd-rootfs/live-build/" -type d -name '*hooks*' -print0 |
			xargs -0I {} cp -af "${staging_dir}/extras/"* {}
	fi
}

prepare_chroot_archive() {
	local staging_dir="${1}"

	if [[ -n "${CHROOT_ARCHIVE}" ]]; then
		cp -aR "${CHROOT_ARCHIVE}" "${staging_dir}/chroot-archive"
		# Set ubuntu-old-fashioned flag to use the chroot-archive
		chroot_archive_flag=(--use-chroot-archive ../chroot-archive)
	fi
}

prepare_ingredients() {
	local staging_dir="${1}"

	prepare_ubuntu_old_fashioned "${staging_dir}"
	prepare_livecd_rootfs "${staging_dir}"
	prepare_extra_hooks "${staging_dir}"
	prepare_chroot_archive "${staging_dir}"

	(
		cd "${staging_dir}"
		tar czf ingredients.tar.gz --exclude-vcs ./*
	)
}

validate_old_fashioned_flags() {
	local staging_dir="${1}"

	# remaining arguments are flags for ubuntu-old-fashioned
	shift

	local valid_old_fashioned_flags
	valid_old_fashioned_flags=(
		$(find "${staging_dir}" -name 'old-fashioned-image-build' -print0 |
			 xargs -0I {} grep -o "${__flag_regex})" {} |
			 tr -d ')'))

	for flag in $(echo ${@} | grep -o "${__flag_regex}"); do
		if [[ ! "${valid_old_fashioned_flags[*]}" = *"${flag}"* ]]; then
			echo -e "\nerror: unknown ubuntu-old-fashioned option '${flag}'\n" >&2
			exit 255
		fi
		shift
	done
}

build_images() {
	local temp_dir
	local bartender_name
	local drink_name

	temp_dir="$(mktemp --directory)"
	bartender_name="$(petname)-ubuntu-bartender"
	drink_name="${bartender_name/-bartender/-on-the-rocks.tar.gz}"

	build-provider-assert-ready

	cleanup() {
		echo "Cleaning up..."
		rm -rf "${temp_dir}"
		build-provider-destroy "${bartender_name}"
	}

	if [[ "${SHOULD_CLEANUP}" = "YES" ]]; then
		trap cleanup EXIT
	fi

	build-provider-create "${bartender_name}"

	echo "Preparing ingredients..."
	prepare_ingredients "${temp_dir}"
	validate_old_fashioned_flags "${temp_dir}" "${@}"
	build-provider-upload "${bartender_name}" "${temp_dir}/ingredients.tar.gz" "ingredients.tar.gz"
	build-provider-run "${bartender_name}" -- tar xf "ingredients.tar.gz"

	echo "Mixing drink... (See progress in ${bartender_name}.log)"
	cat > "${temp_dir}/mix-old-fashioned" <<- EOF
		#!/bin/bash -x
		sudo add-apt-repository -y -u ppa:launchpad/ppa
		sleep 2
		sudo apt-get -q update
		sleep 2
		sudo apt-get -q install -y \
			launchpad-buildd \
			python-ubuntutools \
			python3-ubuntutools \
			python3-launchpadlib \
			bzr \
			git 
		cd livecd-rootfs
		sudo -E ../ubuntu-old-fashioned/old-fashioned-image-build \
			${chroot_archive_flag[@]} \
			${series_flag[@]} \
			--no-cleanup \
			${@}
	EOF
	build-provider-upload "${bartender_name}" "${temp_dir}/mix-old-fashioned" "mix-old-fashioned"
	build-provider-run "${bartender_name}" -- bash mix-old-fashioned &>"${bartender_name}.log" </dev/null

	echo "Pouring ${drink_name}..."
	build-provider-run "${bartender_name}" -- tar czf "drink.tar.gz" "build.output"
	build-provider-download "${bartender_name}" "drink.tar.gz" "${drink_name}"
}

assert_dependencies_installed

apply_default_bartender_configuration

# Pull valid flags out of usage help text
valid_flags=($(print_usage 2>&1 | grep -o "${__flag_regex}"))

# Parse command line flags
while [[ $# -gt 0 ]]; do
	case ${1} in
	--help)
		SHOW_HELP=YES
		shift
		;;
	--no-cleanup)
		SHOULD_CLEANUP=NO
		shift
		;;
	--)
		shift
		break
		;;
	--*)
		if [[ "${valid_flags[*]}" = *"${1}"* ]]; then
			VAR=$(echo "${1}" | cut -d- -f3- | tr '[:lower:]' '[:upper:]' | tr '-' '_')
			declare "${VAR}"="${2}"
			shift
			shift
			continue
		fi
		# If the flag is invalid, drop-through to error handling
		;&
	*)
		echo -e "\nerror: unknown option '${1}'\n" >&2
		print_usage
		exit 255
		;;
	esac
done

if [[ "${SHOW_HELP}" = "YES" ]]; then
	print_usage
	exit 255
fi

load_build_provider_configuration

# The --series flag is required by ubuntu-old-fashioned for image builds,
# so we check to make sure we have it before moving on:
if [[ -z "${series_flag[*]}" ]] && ! echo -- "${@}" | grep -q -- --series; then
	echo -e "\nerror: the '--series' option is required by ubuntu-old-fashioned\n" >&2
	print_usage
	exit 255
fi

build_images "${@}"
